{"ast":null,"code":"\"use client\";\n\nimport * as React from 'react';\nimport { useEffect, useRef, useState } from 'react';\nimport classNames from 'classnames';\nimport BaseOverlay from '@restart/ui/Overlay';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport useIsomorphicEffect from '@restart/hooks/useIsomorphicEffect';\nimport useMergedRefs from '@restart/hooks/useMergedRefs';\nimport useOverlayOffset from './useOverlayOffset';\nimport Fade from './Fade';\nimport safeFindDOMNode from './safeFindDOMNode';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction wrapRefs(props, arrowProps) {\n  const {\n    ref\n  } = props;\n  const {\n    ref: aRef\n  } = arrowProps;\n\n  props.ref = ref.__wrapped || (ref.__wrapped = r => ref(safeFindDOMNode(r)));\n\n  arrowProps.ref = aRef.__wrapped || (aRef.__wrapped = r => aRef(safeFindDOMNode(r)));\n}\n\nconst Overlay = /*#__PURE__*/React.forwardRef(({\n  children: overlay,\n  transition = Fade,\n  popperConfig = {},\n  rootClose = false,\n  placement = 'top',\n  show: outerShow = false,\n  ...outerProps\n}, outerRef) => {\n  const popperRef = useRef({});\n  const [firstRenderedState, setFirstRenderedState] = useState(null);\n  const [ref, modifiers] = useOverlayOffset(outerProps.offset);\n  const mergedRef = useMergedRefs(outerRef, ref);\n  const actualTransition = transition === true ? Fade : transition || undefined;\n  const handleFirstUpdate = useEventCallback(state => {\n    setFirstRenderedState(state);\n    popperConfig == null || popperConfig.onFirstUpdate == null || popperConfig.onFirstUpdate(state);\n  });\n  useIsomorphicEffect(() => {\n    if (firstRenderedState && outerProps.target) {\n      // Must wait for target element to resolve before updating popper.\n      popperRef.current.scheduleUpdate == null || popperRef.current.scheduleUpdate();\n    }\n  }, [firstRenderedState, outerProps.target]);\n  useEffect(() => {\n    if (!outerShow) {\n      setFirstRenderedState(null);\n    }\n  }, [outerShow]);\n  return (/*#__PURE__*/_jsx(BaseOverlay, { ...outerProps,\n      ref: mergedRef,\n      popperConfig: { ...popperConfig,\n        modifiers: modifiers.concat(popperConfig.modifiers || []),\n        onFirstUpdate: handleFirstUpdate\n      },\n      transition: actualTransition,\n      rootClose: rootClose,\n      placement: placement,\n      show: outerShow,\n      children: (overlayProps, {\n        arrowProps,\n        popper: popperObj,\n        show\n      }) => {\n        var _popperObj$state;\n\n        wrapRefs(overlayProps, arrowProps); // Need to get placement from popper object, handling case when overlay is flipped using 'flip' prop\n\n        const updatedPlacement = popperObj == null ? void 0 : popperObj.placement;\n        const popper = Object.assign(popperRef.current, {\n          state: popperObj == null ? void 0 : popperObj.state,\n          scheduleUpdate: popperObj == null ? void 0 : popperObj.update,\n          placement: updatedPlacement,\n          outOfBoundaries: (popperObj == null || (_popperObj$state = popperObj.state) == null || (_popperObj$state = _popperObj$state.modifiersData.hide) == null ? void 0 : _popperObj$state.isReferenceHidden) || false,\n          strategy: popperConfig.strategy\n        });\n        const hasDoneInitialMeasure = !!firstRenderedState;\n        if (typeof overlay === 'function') return overlay({ ...overlayProps,\n          placement: updatedPlacement,\n          show,\n          ...(!transition && show && {\n            className: 'show'\n          }),\n          popper,\n          arrowProps,\n          hasDoneInitialMeasure\n        });\n        return (/*#__PURE__*/React.cloneElement(overlay, { ...overlayProps,\n            placement: updatedPlacement,\n            arrowProps,\n            popper,\n            hasDoneInitialMeasure,\n            className: classNames(overlay.props.className, !transition && show && 'show'),\n            style: { ...overlay.props.style,\n              ...overlayProps.style\n            }\n          })\n        );\n      }\n    })\n  );\n});\nOverlay.displayName = 'Overlay';\nexport default Overlay;","map":{"version":3,"sources":["/media/pablo/137624ed-270b-478a-b945-4e982e255fb2/pablo/DIU/2TRIMESTRE/ProyectoFinal2T/FrontAgendav2(Final)/node_modules/react-bootstrap/esm/Overlay.js"],"names":["React","useEffect","useRef","useState","classNames","BaseOverlay","useEventCallback","useIsomorphicEffect","useMergedRefs","useOverlayOffset","Fade","safeFindDOMNode","jsx","_jsx","wrapRefs","props","arrowProps","ref","aRef","__wrapped","r","Overlay","forwardRef","children","overlay","transition","popperConfig","rootClose","placement","show","outerShow","outerProps","outerRef","popperRef","firstRenderedState","setFirstRenderedState","modifiers","offset","mergedRef","actualTransition","undefined","handleFirstUpdate","state","onFirstUpdate","target","current","scheduleUpdate","concat","overlayProps","popper","popperObj","_popperObj$state","updatedPlacement","Object","assign","update","outOfBoundaries","modifiersData","hide","isReferenceHidden","strategy","hasDoneInitialMeasure","className","cloneElement","style","displayName"],"mappings":"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","sourcesContent":["\"use client\";\n\nimport * as React from 'react';\nimport { useEffect, useRef, useState } from 'react';\nimport classNames from 'classnames';\nimport BaseOverlay from '@restart/ui/Overlay';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport useIsomorphicEffect from '@restart/hooks/useIsomorphicEffect';\nimport useMergedRefs from '@restart/hooks/useMergedRefs';\nimport useOverlayOffset from './useOverlayOffset';\nimport Fade from './Fade';\nimport safeFindDOMNode from './safeFindDOMNode';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction wrapRefs(props, arrowProps) {\n  const {\n    ref\n  } = props;\n  const {\n    ref: aRef\n  } = arrowProps;\n  props.ref = ref.__wrapped || (ref.__wrapped = r => ref(safeFindDOMNode(r)));\n  arrowProps.ref = aRef.__wrapped || (aRef.__wrapped = r => aRef(safeFindDOMNode(r)));\n}\nconst Overlay = /*#__PURE__*/React.forwardRef(({\n  children: overlay,\n  transition = Fade,\n  popperConfig = {},\n  rootClose = false,\n  placement = 'top',\n  show: outerShow = false,\n  ...outerProps\n}, outerRef) => {\n  const popperRef = useRef({});\n  const [firstRenderedState, setFirstRenderedState] = useState(null);\n  const [ref, modifiers] = useOverlayOffset(outerProps.offset);\n  const mergedRef = useMergedRefs(outerRef, ref);\n  const actualTransition = transition === true ? Fade : transition || undefined;\n  const handleFirstUpdate = useEventCallback(state => {\n    setFirstRenderedState(state);\n    popperConfig == null || popperConfig.onFirstUpdate == null || popperConfig.onFirstUpdate(state);\n  });\n  useIsomorphicEffect(() => {\n    if (firstRenderedState && outerProps.target) {\n      // Must wait for target element to resolve before updating popper.\n      popperRef.current.scheduleUpdate == null || popperRef.current.scheduleUpdate();\n    }\n  }, [firstRenderedState, outerProps.target]);\n  useEffect(() => {\n    if (!outerShow) {\n      setFirstRenderedState(null);\n    }\n  }, [outerShow]);\n  return /*#__PURE__*/_jsx(BaseOverlay, {\n    ...outerProps,\n    ref: mergedRef,\n    popperConfig: {\n      ...popperConfig,\n      modifiers: modifiers.concat(popperConfig.modifiers || []),\n      onFirstUpdate: handleFirstUpdate\n    },\n    transition: actualTransition,\n    rootClose: rootClose,\n    placement: placement,\n    show: outerShow,\n    children: (overlayProps, {\n      arrowProps,\n      popper: popperObj,\n      show\n    }) => {\n      var _popperObj$state;\n      wrapRefs(overlayProps, arrowProps);\n      // Need to get placement from popper object, handling case when overlay is flipped using 'flip' prop\n      const updatedPlacement = popperObj == null ? void 0 : popperObj.placement;\n      const popper = Object.assign(popperRef.current, {\n        state: popperObj == null ? void 0 : popperObj.state,\n        scheduleUpdate: popperObj == null ? void 0 : popperObj.update,\n        placement: updatedPlacement,\n        outOfBoundaries: (popperObj == null || (_popperObj$state = popperObj.state) == null || (_popperObj$state = _popperObj$state.modifiersData.hide) == null ? void 0 : _popperObj$state.isReferenceHidden) || false,\n        strategy: popperConfig.strategy\n      });\n      const hasDoneInitialMeasure = !!firstRenderedState;\n      if (typeof overlay === 'function') return overlay({\n        ...overlayProps,\n        placement: updatedPlacement,\n        show,\n        ...(!transition && show && {\n          className: 'show'\n        }),\n        popper,\n        arrowProps,\n        hasDoneInitialMeasure\n      });\n      return /*#__PURE__*/React.cloneElement(overlay, {\n        ...overlayProps,\n        placement: updatedPlacement,\n        arrowProps,\n        popper,\n        hasDoneInitialMeasure,\n        className: classNames(overlay.props.className, !transition && show && 'show'),\n        style: {\n          ...overlay.props.style,\n          ...overlayProps.style\n        }\n      });\n    }\n  });\n});\nOverlay.displayName = 'Overlay';\nexport default Overlay;"]},"metadata":{},"sourceType":"module"}