{"ast":null,"code":"var _jsxFileName = \"/media/pablo/137624ed-270b-478a-b945-4e982e255fb2/pablo/DIU/2TRIMESTRE/ProyectoFinal2T/FrontAgendav2(Final)/src/components/Editar.js\";\nimport React, { useEffect, useState } from 'react';\nimport AgendaDataService from '../services/agenda.service';\nimport TutorialDataService from '../services/tutorial.service';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { Modal, ListGroup, Form, Button, Container } from 'react-bootstrap';\n\nfunction EditPersona() {\n  var _location$state;\n\n  const id = window.location.pathname.split('/')[2]; // Obtenemos el id de la persona desde la URL\n\n  const history = useHistory(); // Lo usamos para redirigir después de actualizar\n\n  const location = useLocation(); // Accedemos a los datos enviados desde otro componente.\n\n  const updatePersonaInList = (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.updatePersonaInList; // recibe una función para actualizar la lista de personas en el componente anterior.\n  // Inicializar el estado de la persona\n\n  const [persona, setPersona] = useState({\n    id: id,\n    nombre: '',\n    apellido: '',\n    direccion: '',\n    codigoPostal: '',\n    ciudad: '',\n    fechaNacimiento: '',\n    tutoriales: [] // Campo para tutoriales asignados\n\n  }); // Lista de tutoriales disponibles obtenidos desde el servidor.\n\n  const [availableTutorials, setAvailableTutorials] = useState([]); // Lista de tutoriales asignados a la persona\n\n  const [selectedTutorials, setSelectedTutorials] = useState([]); // Controla la visibilidad de los tutoriales\n\n  const [showTutorialModal, setShowTutorialModal] = useState(false);\n  useEffect(() => {\n    // Cargar tutoriales disponibles\n    TutorialDataService.getAllTutorials().then(response => {\n      setAvailableTutorials(response.data);\n    }).catch(error => {\n      console.error('Error al cargar tutoriales:', error);\n    }); // Obtener la persona por ID\n\n    AgendaDataService.getPersona(id).then(response => {\n      console.log(response.data); // Verifica la estructura\n\n      setPersona(response.data);\n      setSelectedTutorials(response.data.tutoriales || []); // Asegúrate de que sea un array\n    }).catch(error => {\n      console.error(\"Error al obtener la persona:\", error);\n    });\n  }, [id]);\n\n  const editPersona = e => {\n    e.preventDefault();\n    const personaData = { ...persona,\n      tutoriales: selectedTutorials\n    }; // Combina tutoriales seleccionados\n    // Actualizar la persona en el servidor\n\n    AgendaDataService.updatePersona(id, personaData).then(() => {\n      console.log(\"Persona actualizada en el servidor.\");\n\n      if (updatePersonaInList) {\n        updatePersonaInList(personaData); // Actualiza la lista\n      }\n\n      history.push(\"/\"); // Redirige después de la actualización\n    }).catch(error => {\n      console.error(\"Error al actualizar la persona:\", error);\n    });\n  };\n\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setPersona({ ...persona,\n      [name]: value // Actualiza el campo correspondiente en el estado\n\n    });\n  };\n\n  const toggleTutorialSelection = tutorialId => {\n    if (selectedTutorials.includes(tutorialId)) {\n      setSelectedTutorials(selectedTutorials.filter(id => id !== tutorialId));\n    } else {\n      setSelectedTutorials([...selectedTutorials, tutorialId]);\n    }\n  };\n\n  const openTutorialModal = () => setShowTutorialModal(true);\n\n  const closeTutorialModal = () => setShowTutorialModal(false);\n\n  return React.createElement(Container, {\n    className: \"edit-persona-container\",\n    style: {\n      minHeight: '100vh',\n      fontFamily: \"'Poppins', sans-serif\",\n      padding: '2rem'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"card\",\n    style: {\n      maxWidth: '600px',\n      margin: '0 auto',\n      padding: '2rem',\n      borderRadius: '10px',\n      boxShadow: '0 10px 20px rgba(0, 0, 0, 0.1)'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    className: \"mb-4 text-center\",\n    style: {\n      fontWeight: 'bold',\n      color: '#3b3b3b'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, \"Editar Persona\"), React.createElement(\"form\", {\n    onSubmit: editPersona,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, React.createElement(Form.Group, {\n    className: \"mb-4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, React.createElement(Form.Label, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, \"Nombre\"), React.createElement(Form.Control, {\n    type: \"text\",\n    name: \"nombre\",\n    value: persona.nombre,\n    onChange: handleChange,\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  })), React.createElement(Form.Group, {\n    className: \"mb-4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, React.createElement(Form.Label, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, \"Apellido\"), React.createElement(Form.Control, {\n    type: \"text\",\n    name: \"apellido\",\n    value: persona.apellido,\n    onChange: handleChange,\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  })), React.createElement(Form.Group, {\n    className: \"mb-4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, React.createElement(Form.Label, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, \"Direcci\\xF3n\"), React.createElement(Form.Control, {\n    type: \"text\",\n    name: \"direccion\",\n    value: persona.direccion,\n    onChange: handleChange,\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  })), React.createElement(Form.Group, {\n    className: \"mb-4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, React.createElement(Form.Label, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, \"C\\xF3digo Postal\"), React.createElement(Form.Control, {\n    type: \"text\",\n    name: \"codigoPostal\",\n    value: persona.codigoPostal,\n    onChange: handleChange,\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  })), React.createElement(Form.Group, {\n    className: \"mb-4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, React.createElement(Form.Label, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, \"Ciudad\"), React.createElement(Form.Control, {\n    type: \"text\",\n    name: \"ciudad\",\n    value: persona.ciudad,\n    onChange: handleChange,\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  })), React.createElement(Form.Group, {\n    className: \"mb-4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }, React.createElement(Form.Label, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }, \"Fecha de Nacimiento\"), React.createElement(Form.Control, {\n    type: \"date\",\n    name: \"fechaNacimiento\",\n    value: persona.fechaNacimiento,\n    onChange: handleChange,\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  })), React.createElement(Form.Group, {\n    className: \"mb-4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }, React.createElement(Form.Label, {\n    style: {\n      fontWeight: '600'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  }, \"Tutoriales asignados\"), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }, selectedTutorials.length > 0 ? `Seleccionados: ${selectedTutorials.join(\", \")}` : \"Ningún tutorial seleccionado\"), React.createElement(Button, {\n    variant: \"secondary\",\n    className: \"mt-2\",\n    onClick: openTutorialModal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  }, \"Seleccionar Tutoriales\")), React.createElement(Button, {\n    type: \"submit\",\n    className: \"btn btn-primary w-100\",\n    style: {\n      borderRadius: '10px',\n      padding: '12px'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  }, \"Actualizar\"))), React.createElement(Modal, {\n    show: showTutorialModal,\n    onHide: closeTutorialModal,\n    centered: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  }, React.createElement(Modal.Header, {\n    closeButton: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  }, React.createElement(Modal.Title, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182\n    },\n    __self: this\n  }, \"Seleccionar Tutoriales\")), React.createElement(Modal.Body, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184\n    },\n    __self: this\n  }, React.createElement(ListGroup, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185\n    },\n    __self: this\n  }, availableTutorials.map(tutorial => React.createElement(ListGroup.Item, {\n    key: tutorial.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187\n    },\n    __self: this\n  }, React.createElement(Form.Check, {\n    type: \"checkbox\",\n    id: `tutorial-${tutorial.id}`,\n    label: tutorial.title,\n    checked: selectedTutorials.includes(tutorial.id),\n    onChange: () => toggleTutorialSelection(tutorial.id),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188\n    },\n    __self: this\n  }))))), React.createElement(Modal.Footer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: \"primary\",\n    onClick: closeTutorialModal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200\n    },\n    __self: this\n  }, \"Confirmar selecci\\xF3n\"))));\n}\n\nexport default EditPersona;","map":{"version":3,"sources":["/media/pablo/137624ed-270b-478a-b945-4e982e255fb2/pablo/DIU/2TRIMESTRE/ProyectoFinal2T/FrontAgendav2(Final)/src/components/Editar.js"],"names":["React","useEffect","useState","AgendaDataService","TutorialDataService","useHistory","useLocation","Modal","ListGroup","Form","Button","Container","EditPersona","id","window","location","pathname","split","history","updatePersonaInList","state","persona","setPersona","nombre","apellido","direccion","codigoPostal","ciudad","fechaNacimiento","tutoriales","availableTutorials","setAvailableTutorials","selectedTutorials","setSelectedTutorials","showTutorialModal","setShowTutorialModal","getAllTutorials","then","response","data","catch","error","console","getPersona","log","editPersona","e","preventDefault","personaData","updatePersona","push","handleChange","name","value","target","toggleTutorialSelection","tutorialId","includes","filter","openTutorialModal","closeTutorialModal","minHeight","fontFamily","padding","maxWidth","margin","borderRadius","boxShadow","fontWeight","color","length","join","map","tutorial","title"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport AgendaDataService from '../services/agenda.service';\nimport TutorialDataService from '../services/tutorial.service';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { Modal, ListGroup, Form, Button, Container } from 'react-bootstrap';\n\nfunction EditPersona() {\n  const id = window.location.pathname.split('/')[2]; // Obtenemos el id de la persona desde la URL\n  const history = useHistory(); // Lo usamos para redirigir después de actualizar\n  const location = useLocation(); // Accedemos a los datos enviados desde otro componente.\n  const updatePersonaInList = location.state?.updatePersonaInList; // recibe una función para actualizar la lista de personas en el componente anterior.\n\n\n  // Inicializar el estado de la persona\n  const [persona, setPersona] = useState({\n    id: id,\n    nombre: '',\n    apellido: '',\n    direccion: '',\n    codigoPostal: '',\n    ciudad: '',\n    fechaNacimiento: '',\n\n    tutoriales: [] // Campo para tutoriales asignados\n  });\n\n  // Lista de tutoriales disponibles obtenidos desde el servidor.\n  const [availableTutorials, setAvailableTutorials] = useState([]); \n\n  // Lista de tutoriales asignados a la persona\n  const [selectedTutorials, setSelectedTutorials] = useState([]);\n\n  // Controla la visibilidad de los tutoriales\n  const [showTutorialModal, setShowTutorialModal] = useState(false);\n\n  useEffect(() => {\n    // Cargar tutoriales disponibles\n    TutorialDataService.getAllTutorials()\n      .then(response => {\n        setAvailableTutorials(response.data);\n      })\n      .catch(error => {\n        console.error('Error al cargar tutoriales:', error);\n      });\n\n    // Obtener la persona por ID\n    AgendaDataService.getPersona(id)\n      .then(response => {\n        console.log(response.data); // Verifica la estructura\n        setPersona(response.data);\n        setSelectedTutorials(response.data.tutoriales || []); // Asegúrate de que sea un array\n      })\n      .catch(error => {\n        console.error(\"Error al obtener la persona:\", error);\n      });\n  }, [id]);\n\n  const editPersona = (e) => {\n    e.preventDefault();\n    const personaData = { ...persona, tutoriales: selectedTutorials }; // Combina tutoriales seleccionados\n\n    // Actualizar la persona en el servidor\n    AgendaDataService.updatePersona(id, personaData)\n      .then(() => {\n        console.log(\"Persona actualizada en el servidor.\");\n        if (updatePersonaInList) {\n          updatePersonaInList(personaData); // Actualiza la lista\n        }\n        history.push(\"/\"); // Redirige después de la actualización\n      })\n      .catch((error) => {\n        console.error(\"Error al actualizar la persona:\", error);\n      });\n  };\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setPersona({\n      ...persona, [name]: value, // Actualiza el campo correspondiente en el estado\n    });\n  };\n\n  const toggleTutorialSelection = (tutorialId) => {\n    if (selectedTutorials.includes(tutorialId)) {\n      setSelectedTutorials(selectedTutorials.filter(id => id !== tutorialId));\n    } else {\n      setSelectedTutorials([...selectedTutorials, tutorialId]);\n    }\n  };\n\n  const openTutorialModal = () => setShowTutorialModal(true);\n  const closeTutorialModal = () => setShowTutorialModal(false);\n\n  return (\n    <Container className=\"edit-persona-container\" style={{ minHeight: '100vh', fontFamily: \"'Poppins', sans-serif\", padding: '2rem' }}>\n      <div className=\"card\" style={{ maxWidth: '600px', margin: '0 auto', padding: '2rem', borderRadius: '10px', boxShadow: '0 10px 20px rgba(0, 0, 0, 0.1)' }}>\n        <h3 className=\"mb-4 text-center\" style={{ fontWeight: 'bold', color: '#3b3b3b' }}>Editar Persona</h3>\n        <form onSubmit={editPersona}>\n          {/* Campos del formulario */}\n          <Form.Group className=\"mb-4\">\n            <Form.Label>Nombre</Form.Label>\n            <Form.Control\n              type=\"text\"\n              name=\"nombre\"\n              value={persona.nombre}\n              onChange={handleChange}\n              required\n            />\n          </Form.Group>\n          <Form.Group className=\"mb-4\">\n            <Form.Label>Apellido</Form.Label>\n            <Form.Control\n              type=\"text\"\n              name=\"apellido\"\n              value={persona.apellido}\n              onChange={handleChange}\n              required\n            />\n          </Form.Group>\n          <Form.Group className=\"mb-4\">\n            <Form.Label>Dirección</Form.Label>\n            <Form.Control\n              type=\"text\"\n              name=\"direccion\"\n              value={persona.direccion}\n              onChange={handleChange}\n              required\n            />\n          </Form.Group>\n          <Form.Group className=\"mb-4\">\n            <Form.Label>Código Postal</Form.Label>\n            <Form.Control\n              type=\"text\"\n              name=\"codigoPostal\"\n              value={persona.codigoPostal}\n              onChange={handleChange}\n              required\n            />\n          </Form.Group>\n          <Form.Group className=\"mb-4\">\n            <Form.Label>Ciudad</Form.Label>\n            <Form.Control\n              type=\"text\"\n              name=\"ciudad\"\n              value={persona.ciudad}\n              onChange={handleChange}\n              required\n            />\n          </Form.Group>\n          <Form.Group className=\"mb-4\">\n            <Form.Label>Fecha de Nacimiento</Form.Label>\n            <Form.Control\n              type=\"date\"\n              name=\"fechaNacimiento\"\n              value={persona.fechaNacimiento}\n              onChange={handleChange}\n              required\n            />\n          </Form.Group>\n\n          {/* Campo para tutoriales asignados */}\n          <Form.Group className=\"mb-4\">\n            <Form.Label style={{ fontWeight: '600' }}>Tutoriales asignados</Form.Label>\n            <div>\n              {selectedTutorials.length > 0\n                ? `Seleccionados: ${selectedTutorials.join(\", \")}`\n                : \"Ningún tutorial seleccionado\"}\n            </div>\n            <Button variant=\"secondary\" className=\"mt-2\" onClick={openTutorialModal}>\n              Seleccionar Tutoriales\n            </Button>\n          </Form.Group>\n          <Button type=\"submit\" className=\"btn btn-primary w-100\" style={{ borderRadius: '10px', padding: '12px' }}>\n            Actualizar\n          </Button>\n        </form>\n      </div>\n\n      {/* Modal para seleccionar tutoriales */}\n      <Modal show={showTutorialModal} onHide={closeTutorialModal} centered>\n        <Modal.Header closeButton>\n          <Modal.Title>Seleccionar Tutoriales</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <ListGroup>\n            {availableTutorials.map((tutorial) => (\n              <ListGroup.Item key={tutorial.id}>\n                <Form.Check\n                  type=\"checkbox\"\n                  id={`tutorial-${tutorial.id}`}\n                  label={tutorial.title}\n                  checked={selectedTutorials.includes(tutorial.id)}\n                  onChange={() => toggleTutorialSelection(tutorial.id)}\n                />\n              </ListGroup.Item>\n            ))}\n          </ListGroup>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"primary\" onClick={closeTutorialModal}>\n            Confirmar selección\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </Container>\n  );\n}\n\nexport default EditPersona;\n"]},"metadata":{},"sourceType":"module"}