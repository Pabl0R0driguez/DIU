{"ast":null,"code":"import { initializeApp } from \"firebase/app\";\nimport { getAuth, GoogleAuthProvider, signInWithPopup, signInWithEmailAndPassword } from \"firebase/auth\";\nimport { getFirestore, doc, getDoc, setDoc } from \"firebase/firestore\"; // Configuración de Firebase\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBbMgMiFEvuerhGK1f8L-sHNrRE4ZVF6KQ\",\n  authDomain: \"loginproyectofinal-f76cb.firebaseapp.com\",\n  projectId: \"loginproyectofinal-f76cb\",\n  storageBucket: \"loginproyectofinal-f76cb.appspot.com\",\n  messagingSenderId: \"991930152122\",\n  appId: \"1:991930152122:web:fdf48ac05af4fa40067e83\",\n  measurementId: \"G-41K341S8RX\"\n}; // Inicializar Firebase\n\nconst app = initializeApp(firebaseConfig); // Obtener la autenticación y la base de datos\n\nconst auth = getAuth(app);\nconst db = getFirestore(app); // Proveedor de Google\n\nconst googleProvider = new GoogleAuthProvider(); // Función para iniciar sesión con Google\n\nconst signInWithGoogle = () => signInWithPopup(auth, googleProvider); // Función para iniciar sesión con email y contraseña \n\n\nconst signInWithEmail = (email, password) => signInWithEmailAndPassword(auth, email, password); // Función para crear documento del usuario\n\n\nconst generateUserDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return null;\n  const userRef = doc(db, \"users\", userAuth.uid);\n  /* Obternener persona de la base de datos */\n\n  const userSnap = await getDoc(userRef); // Si el documento no existe, lo creamos\n\n  if (!userSnap.exists()) {\n    const {\n      email,\n      displayName,\n      photoURL\n    } = userAuth;\n\n    try {\n      await setDoc(userRef, {\n        displayName,\n        email,\n        photoURL,\n        ...additionalData\n      });\n    } catch (error) {\n      console.error(\"Error creando documento de usuario\", error);\n    }\n  }\n\n  return userSnap.data();\n}; // Exportar funciones\n\n\nexport { auth, db, signInWithGoogle, signInWithEmail, generateUserDocument };","map":{"version":3,"sources":["/media/pablo/137624ed-270b-478a-b945-4e982e255fb2/pablo/DIU/2TRIMESTRE/ProyectoFinal2T/FrontAgendav2(Final)/src/firebase.js"],"names":["initializeApp","getAuth","GoogleAuthProvider","signInWithPopup","signInWithEmailAndPassword","getFirestore","doc","getDoc","setDoc","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","auth","db","googleProvider","signInWithGoogle","signInWithEmail","email","password","generateUserDocument","userAuth","additionalData","userRef","uid","userSnap","exists","displayName","photoURL","error","console","data"],"mappings":"AAAA,SAASA,aAAT,QAA8B,cAA9B;AACA,SACEC,OADF,EAEEC,kBAFF,EAGEC,eAHF,EAIEC,0BAJF,QAKO,eALP;AAMA,SAASC,YAAT,EAAuBC,GAAvB,EAA4BC,MAA5B,EAAoCC,MAApC,QAAkD,oBAAlD,C,CAEA;;AACA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,MAAM,EAAE,yCADa;AAErBC,EAAAA,UAAU,EAAE,0CAFS;AAGrBC,EAAAA,SAAS,EAAE,0BAHU;AAIrBC,EAAAA,aAAa,EAAE,sCAJM;AAKrBC,EAAAA,iBAAiB,EAAE,cALE;AAMrBC,EAAAA,KAAK,EAAE,2CANc;AAOrBC,EAAAA,aAAa,EAAE;AAPM,CAAvB,C,CAUA;;AACA,MAAMC,GAAG,GAAGjB,aAAa,CAACS,cAAD,CAAzB,C,CAEA;;AACA,MAAMS,IAAI,GAAGjB,OAAO,CAACgB,GAAD,CAApB;AACA,MAAME,EAAE,GAAGd,YAAY,CAACY,GAAD,CAAvB,C,CAEA;;AACA,MAAMG,cAAc,GAAG,IAAIlB,kBAAJ,EAAvB,C,CAEA;;AACA,MAAMmB,gBAAgB,GAAG,MAAMlB,eAAe,CAACe,IAAD,EAAOE,cAAP,CAA9C,C,CAEA;;;AACA,MAAME,eAAe,GAAG,CAACC,KAAD,EAAQC,QAAR,KACtBpB,0BAA0B,CAACc,IAAD,EAAOK,KAAP,EAAcC,QAAd,CAD5B,C,CAGA;;;AACA,MAAMC,oBAAoB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AAC/D,MAAI,CAACD,QAAL,EAAe,OAAO,IAAP;AAEf,QAAME,OAAO,GAAGtB,GAAG,CAACa,EAAD,EAAK,OAAL,EAAcO,QAAQ,CAACG,GAAvB,CAAnB;AACA;;AACA,QAAMC,QAAQ,GAAG,MAAMvB,MAAM,CAACqB,OAAD,CAA7B,CAL+D,CAO/D;;AACA,MAAI,CAACE,QAAQ,CAACC,MAAT,EAAL,EAAwB;AACtB,UAAM;AAAER,MAAAA,KAAF;AAASS,MAAAA,WAAT;AAAsBC,MAAAA;AAAtB,QAAmCP,QAAzC;;AACA,QAAI;AACF,YAAMlB,MAAM,CAACoB,OAAD,EAAU;AACpBI,QAAAA,WADoB;AAEpBT,QAAAA,KAFoB;AAGpBU,QAAAA,QAHoB;AAIpB,WAAGN;AAJiB,OAAV,CAAZ;AAMD,KAPD,CAOE,OAAOO,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAc,oCAAd,EAAoDA,KAApD;AACD;AACF;;AAED,SAAOJ,QAAQ,CAACM,IAAT,EAAP;AACD,CAvBD,C,CAyBA;;;AACA,SAASlB,IAAT,EAAeC,EAAf,EAAmBE,gBAAnB,EAAqCC,eAArC,EAAsDG,oBAAtD","sourcesContent":["import { initializeApp } from \"firebase/app\"; \nimport { \n  getAuth, \n  GoogleAuthProvider, \n  signInWithPopup, \n  signInWithEmailAndPassword \n} from \"firebase/auth\"; \nimport { getFirestore, doc, getDoc, setDoc } from \"firebase/firestore\"; \n\n// Configuración de Firebase\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBbMgMiFEvuerhGK1f8L-sHNrRE4ZVF6KQ\",\n  authDomain: \"loginproyectofinal-f76cb.firebaseapp.com\",\n  projectId: \"loginproyectofinal-f76cb\",\n  storageBucket: \"loginproyectofinal-f76cb.appspot.com\",\n  messagingSenderId: \"991930152122\",\n  appId: \"1:991930152122:web:fdf48ac05af4fa40067e83\",\n  measurementId: \"G-41K341S8RX\"\n};\n\n// Inicializar Firebase\nconst app = initializeApp(firebaseConfig);\n\n// Obtener la autenticación y la base de datos\nconst auth = getAuth(app);\nconst db = getFirestore(app);\n\n// Proveedor de Google\nconst googleProvider = new GoogleAuthProvider();\n\n// Función para iniciar sesión con Google\nconst signInWithGoogle = () => signInWithPopup(auth, googleProvider);\n\n// Función para iniciar sesión con email y contraseña \nconst signInWithEmail = (email, password) => \n  signInWithEmailAndPassword(auth, email, password);\n\n// Función para crear documento del usuario\nconst generateUserDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return null;\n\n  const userRef = doc(db, \"users\", userAuth.uid);\n  /* Obternener persona de la base de datos */\n  const userSnap = await getDoc(userRef);\n\n  // Si el documento no existe, lo creamos\n  if (!userSnap.exists()) {\n    const { email, displayName, photoURL } = userAuth;\n    try {\n      await setDoc(userRef, {\n        displayName,\n        email,\n        photoURL,\n        ...additionalData\n      });\n    } catch (error) {\n      console.error(\"Error creando documento de usuario\", error);\n    }\n  }\n\n  return userSnap.data();\n};\n\n// Exportar funciones\nexport { auth, db, signInWithGoogle, signInWithEmail, generateUserDocument };\n"]},"metadata":{},"sourceType":"module"}