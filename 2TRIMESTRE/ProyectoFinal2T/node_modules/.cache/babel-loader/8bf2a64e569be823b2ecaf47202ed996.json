{"ast":null,"code":"\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { cloneElement } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { map } from './ElementChildren';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst ROUND_PRECISION = 1000;\n/**\n * Validate that children, if any, are instances of `ProgressBar`.\n */\n\nfunction onlyProgressBar(props, propName, componentName) {\n  const children = props[propName];\n\n  if (!children) {\n    return null;\n  }\n\n  let error = null;\n  React.Children.forEach(children, child => {\n    if (error) {\n      return;\n    }\n    /**\n     * Compare types in a way that works with libraries that patch and proxy\n     * components like react-hot-loader.\n     *\n     * see https://github.com/gaearon/react-hot-loader#checking-element-types\n     */\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n\n\n    const element = /*#__PURE__*/_jsx(ProgressBar, {});\n\n    if (child.type === element.type) return;\n    const childType = child.type;\n    const childIdentifier = /*#__PURE__*/React.isValidElement(child) ? childType.displayName || childType.name || childType : child;\n    error = new Error(`Children of ${componentName} can contain only ProgressBar ` + `components. Found ${childIdentifier}.`);\n  });\n  return error;\n}\n\nfunction getPercentage(now, min, max) {\n  const percentage = (now - min) / (max - min) * 100;\n  return Math.round(percentage * ROUND_PRECISION) / ROUND_PRECISION;\n}\n\nfunction renderProgressBar({\n  min,\n  now,\n  max,\n  label,\n  visuallyHidden,\n  striped,\n  animated,\n  className,\n  style,\n  variant,\n  bsPrefix,\n  ...props\n}, ref) {\n  return (/*#__PURE__*/_jsx(\"div\", {\n      ref: ref,\n      ...props,\n      role: \"progressbar\",\n      className: classNames(className, `${bsPrefix}-bar`, {\n        [`bg-${variant}`]: variant,\n        [`${bsPrefix}-bar-animated`]: animated,\n        [`${bsPrefix}-bar-striped`]: animated || striped\n      }),\n      style: {\n        width: `${getPercentage(now, min, max)}%`,\n        ...style\n      },\n      \"aria-valuenow\": now,\n      \"aria-valuemin\": min,\n      \"aria-valuemax\": max,\n      children: visuallyHidden ? /*#__PURE__*/_jsx(\"span\", {\n        className: \"visually-hidden\",\n        children: label\n      }) : label\n    })\n  );\n}\n\nconst ProgressBar = /*#__PURE__*/React.forwardRef(({\n  isChild = false,\n  ...rest\n}, ref) => {\n  const props = {\n    min: 0,\n    max: 100,\n    animated: false,\n    visuallyHidden: false,\n    striped: false,\n    ...rest\n  };\n  props.bsPrefix = useBootstrapPrefix(props.bsPrefix, 'progress');\n\n  if (isChild) {\n    return renderProgressBar(props, ref);\n  }\n\n  const {\n    min,\n    now,\n    max,\n    label,\n    visuallyHidden,\n    striped,\n    animated,\n    bsPrefix,\n    variant,\n    className,\n    children,\n    ...wrapperProps\n  } = props;\n  return (/*#__PURE__*/_jsx(\"div\", {\n      ref: ref,\n      ...wrapperProps,\n      className: classNames(className, bsPrefix),\n      children: children ? map(children, child => /*#__PURE__*/cloneElement(child, {\n        isChild: true\n      })) : renderProgressBar({\n        min,\n        now,\n        max,\n        label,\n        visuallyHidden,\n        striped,\n        animated,\n        bsPrefix,\n        variant\n      }, ref)\n    })\n  );\n});\nProgressBar.displayName = 'ProgressBar';\nexport default ProgressBar;","map":{"version":3,"sources":["/media/pablo/137624ed-270b-478a-b945-4e982e255fb2/pablo/DIU/2TRIMESTRE/ProyectoFinal2T/FrontAgendav2(Final)/node_modules/react-bootstrap/esm/ProgressBar.js"],"names":["classNames","React","cloneElement","useBootstrapPrefix","map","jsx","_jsx","ROUND_PRECISION","onlyProgressBar","props","propName","componentName","children","error","Children","forEach","child","element","ProgressBar","type","childType","childIdentifier","isValidElement","displayName","name","Error","getPercentage","now","min","max","percentage","Math","round","renderProgressBar","label","visuallyHidden","striped","animated","className","style","variant","bsPrefix","ref","role","width","forwardRef","isChild","rest","wrapperProps"],"mappings":"AAAA;;AAEA,OAAOA,UAAP,MAAuB,YAAvB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,YAAT,QAA6B,OAA7B;AACA,SAASC,kBAAT,QAAmC,iBAAnC;AACA,SAASC,GAAT,QAAoB,mBAApB;AACA,SAASC,GAAG,IAAIC,IAAhB,QAA4B,mBAA5B;AACA,MAAMC,eAAe,GAAG,IAAxB;AAEA;;;;AAGA,SAASC,eAAT,CAAyBC,KAAzB,EAAgCC,QAAhC,EAA0CC,aAA1C,EAAyD;AACvD,QAAMC,QAAQ,GAAGH,KAAK,CAACC,QAAD,CAAtB;;AACA,MAAI,CAACE,QAAL,EAAe;AACb,WAAO,IAAP;AACD;;AACD,MAAIC,KAAK,GAAG,IAAZ;AACAZ,EAAAA,KAAK,CAACa,QAAN,CAAeC,OAAf,CAAuBH,QAAvB,EAAiCI,KAAK,IAAI;AACxC,QAAIH,KAAJ,EAAW;AACT;AACD;AAED;;;;;;AAMA;;;AACA,UAAMI,OAAO,GAAG,aAAaX,IAAI,CAACY,WAAD,EAAc,EAAd,CAAjC;;AACA,QAAIF,KAAK,CAACG,IAAN,KAAeF,OAAO,CAACE,IAA3B,EAAiC;AACjC,UAAMC,SAAS,GAAGJ,KAAK,CAACG,IAAxB;AACA,UAAME,eAAe,GAAG,aAAapB,KAAK,CAACqB,cAAN,CAAqBN,KAArB,IAA8BI,SAAS,CAACG,WAAV,IAAyBH,SAAS,CAACI,IAAnC,IAA2CJ,SAAzE,GAAqFJ,KAA1H;AACAH,IAAAA,KAAK,GAAG,IAAIY,KAAJ,CAAW,eAAcd,aAAc,gCAA7B,GAAgE,qBAAoBU,eAAgB,GAA9G,CAAR;AACD,GAjBD;AAkBA,SAAOR,KAAP;AACD;;AACD,SAASa,aAAT,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiCC,GAAjC,EAAsC;AACpC,QAAMC,UAAU,GAAG,CAACH,GAAG,GAAGC,GAAP,KAAeC,GAAG,GAAGD,GAArB,IAA4B,GAA/C;AACA,SAAOG,IAAI,CAACC,KAAL,CAAWF,UAAU,GAAGvB,eAAxB,IAA2CA,eAAlD;AACD;;AACD,SAAS0B,iBAAT,CAA2B;AACzBL,EAAAA,GADyB;AAEzBD,EAAAA,GAFyB;AAGzBE,EAAAA,GAHyB;AAIzBK,EAAAA,KAJyB;AAKzBC,EAAAA,cALyB;AAMzBC,EAAAA,OANyB;AAOzBC,EAAAA,QAPyB;AAQzBC,EAAAA,SARyB;AASzBC,EAAAA,KATyB;AAUzBC,EAAAA,OAVyB;AAWzBC,EAAAA,QAXyB;AAYzB,KAAGhC;AAZsB,CAA3B,EAaGiC,GAbH,EAaQ;AACN,SAAO,cAAapC,IAAI,CAAC,KAAD,EAAQ;AAC9BoC,MAAAA,GAAG,EAAEA,GADyB;AAE9B,SAAGjC,KAF2B;AAG9BkC,MAAAA,IAAI,EAAE,aAHwB;AAI9BL,MAAAA,SAAS,EAAEtC,UAAU,CAACsC,SAAD,EAAa,GAAEG,QAAS,MAAxB,EAA+B;AAClD,SAAE,MAAKD,OAAQ,EAAf,GAAmBA,OAD+B;AAElD,SAAE,GAAEC,QAAS,eAAb,GAA8BJ,QAFoB;AAGlD,SAAE,GAAEI,QAAS,cAAb,GAA6BJ,QAAQ,IAAID;AAHS,OAA/B,CAJS;AAS9BG,MAAAA,KAAK,EAAE;AACLK,QAAAA,KAAK,EAAG,GAAElB,aAAa,CAACC,GAAD,EAAMC,GAAN,EAAWC,GAAX,CAAgB,GADlC;AAEL,WAAGU;AAFE,OATuB;AAa9B,uBAAiBZ,GAba;AAc9B,uBAAiBC,GAda;AAe9B,uBAAiBC,GAfa;AAgB9BjB,MAAAA,QAAQ,EAAEuB,cAAc,GAAG,aAAa7B,IAAI,CAAC,MAAD,EAAS;AACnDgC,QAAAA,SAAS,EAAE,iBADwC;AAEnD1B,QAAAA,QAAQ,EAAEsB;AAFyC,OAAT,CAApB,GAGnBA;AAnByB,KAAR;AAAxB;AAqBD;;AACD,MAAMhB,WAAW,GAAG,aAAajB,KAAK,CAAC4C,UAAN,CAAiB,CAAC;AACjDC,EAAAA,OAAO,GAAG,KADuC;AAEjD,KAAGC;AAF8C,CAAD,EAG/CL,GAH+C,KAGvC;AACT,QAAMjC,KAAK,GAAG;AACZmB,IAAAA,GAAG,EAAE,CADO;AAEZC,IAAAA,GAAG,EAAE,GAFO;AAGZQ,IAAAA,QAAQ,EAAE,KAHE;AAIZF,IAAAA,cAAc,EAAE,KAJJ;AAKZC,IAAAA,OAAO,EAAE,KALG;AAMZ,OAAGW;AANS,GAAd;AAQAtC,EAAAA,KAAK,CAACgC,QAAN,GAAiBtC,kBAAkB,CAACM,KAAK,CAACgC,QAAP,EAAiB,UAAjB,CAAnC;;AACA,MAAIK,OAAJ,EAAa;AACX,WAAOb,iBAAiB,CAACxB,KAAD,EAAQiC,GAAR,CAAxB;AACD;;AACD,QAAM;AACJd,IAAAA,GADI;AAEJD,IAAAA,GAFI;AAGJE,IAAAA,GAHI;AAIJK,IAAAA,KAJI;AAKJC,IAAAA,cALI;AAMJC,IAAAA,OANI;AAOJC,IAAAA,QAPI;AAQJI,IAAAA,QARI;AASJD,IAAAA,OATI;AAUJF,IAAAA,SAVI;AAWJ1B,IAAAA,QAXI;AAYJ,OAAGoC;AAZC,MAaFvC,KAbJ;AAcA,SAAO,cAAaH,IAAI,CAAC,KAAD,EAAQ;AAC9BoC,MAAAA,GAAG,EAAEA,GADyB;AAE9B,SAAGM,YAF2B;AAG9BV,MAAAA,SAAS,EAAEtC,UAAU,CAACsC,SAAD,EAAYG,QAAZ,CAHS;AAI9B7B,MAAAA,QAAQ,EAAEA,QAAQ,GAAGR,GAAG,CAACQ,QAAD,EAAWI,KAAK,IAAI,aAAad,YAAY,CAACc,KAAD,EAAQ;AAC3E8B,QAAAA,OAAO,EAAE;AADkE,OAAR,CAA7C,CAAN,GAEZb,iBAAiB,CAAC;AACtBL,QAAAA,GADsB;AAEtBD,QAAAA,GAFsB;AAGtBE,QAAAA,GAHsB;AAItBK,QAAAA,KAJsB;AAKtBC,QAAAA,cALsB;AAMtBC,QAAAA,OANsB;AAOtBC,QAAAA,QAPsB;AAQtBI,QAAAA,QARsB;AAStBD,QAAAA;AATsB,OAAD,EAUpBE,GAVoB;AANO,KAAR;AAAxB;AAkBD,CAhDgC,CAAjC;AAiDAxB,WAAW,CAACK,WAAZ,GAA0B,aAA1B;AACA,eAAeL,WAAf","sourcesContent":["\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { cloneElement } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { map } from './ElementChildren';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst ROUND_PRECISION = 1000;\n\n/**\n * Validate that children, if any, are instances of `ProgressBar`.\n */\nfunction onlyProgressBar(props, propName, componentName) {\n  const children = props[propName];\n  if (!children) {\n    return null;\n  }\n  let error = null;\n  React.Children.forEach(children, child => {\n    if (error) {\n      return;\n    }\n\n    /**\n     * Compare types in a way that works with libraries that patch and proxy\n     * components like react-hot-loader.\n     *\n     * see https://github.com/gaearon/react-hot-loader#checking-element-types\n     */\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    const element = /*#__PURE__*/_jsx(ProgressBar, {});\n    if (child.type === element.type) return;\n    const childType = child.type;\n    const childIdentifier = /*#__PURE__*/React.isValidElement(child) ? childType.displayName || childType.name || childType : child;\n    error = new Error(`Children of ${componentName} can contain only ProgressBar ` + `components. Found ${childIdentifier}.`);\n  });\n  return error;\n}\nfunction getPercentage(now, min, max) {\n  const percentage = (now - min) / (max - min) * 100;\n  return Math.round(percentage * ROUND_PRECISION) / ROUND_PRECISION;\n}\nfunction renderProgressBar({\n  min,\n  now,\n  max,\n  label,\n  visuallyHidden,\n  striped,\n  animated,\n  className,\n  style,\n  variant,\n  bsPrefix,\n  ...props\n}, ref) {\n  return /*#__PURE__*/_jsx(\"div\", {\n    ref: ref,\n    ...props,\n    role: \"progressbar\",\n    className: classNames(className, `${bsPrefix}-bar`, {\n      [`bg-${variant}`]: variant,\n      [`${bsPrefix}-bar-animated`]: animated,\n      [`${bsPrefix}-bar-striped`]: animated || striped\n    }),\n    style: {\n      width: `${getPercentage(now, min, max)}%`,\n      ...style\n    },\n    \"aria-valuenow\": now,\n    \"aria-valuemin\": min,\n    \"aria-valuemax\": max,\n    children: visuallyHidden ? /*#__PURE__*/_jsx(\"span\", {\n      className: \"visually-hidden\",\n      children: label\n    }) : label\n  });\n}\nconst ProgressBar = /*#__PURE__*/React.forwardRef(({\n  isChild = false,\n  ...rest\n}, ref) => {\n  const props = {\n    min: 0,\n    max: 100,\n    animated: false,\n    visuallyHidden: false,\n    striped: false,\n    ...rest\n  };\n  props.bsPrefix = useBootstrapPrefix(props.bsPrefix, 'progress');\n  if (isChild) {\n    return renderProgressBar(props, ref);\n  }\n  const {\n    min,\n    now,\n    max,\n    label,\n    visuallyHidden,\n    striped,\n    animated,\n    bsPrefix,\n    variant,\n    className,\n    children,\n    ...wrapperProps\n  } = props;\n  return /*#__PURE__*/_jsx(\"div\", {\n    ref: ref,\n    ...wrapperProps,\n    className: classNames(className, bsPrefix),\n    children: children ? map(children, child => /*#__PURE__*/cloneElement(child, {\n      isChild: true\n    })) : renderProgressBar({\n      min,\n      now,\n      max,\n      label,\n      visuallyHidden,\n      striped,\n      animated,\n      bsPrefix,\n      variant\n    }, ref)\n  });\n});\nProgressBar.displayName = 'ProgressBar';\nexport default ProgressBar;"]},"metadata":{},"sourceType":"module"}