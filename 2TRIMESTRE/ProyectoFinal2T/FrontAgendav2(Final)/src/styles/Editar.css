import React, { useEffect, useState, useCallback } from 'react';
import TutorialDataService from '../services/tutorial.service';
import { useHistory } from 'react-router-dom'; // Importamos useHistory
import '../styles/tutorials.styles.css'; // Importar estilos personalizados

function EditTutorial() {
    const id = window.location.pathname.split('/')[2];
    const history = useHistory();

    // useState para crear una variable reactiva que se actualiza en tiempo real
    const [tutorial, setTutorial] = useState({
        id: id,
        title: '',
        description: '',
        published: false,
    });

    // Usamos useEffect para cargar el tutorial cuando se monta el componente
    useEffect(() => {
        TutorialDataService.get(id)
            .then(response => {
                setTutorial(response.data); // Actualiza el estado directamente con los datos del tutorial
            })
            .catch(error => {
                console.error("Hubo un error al cargar el tutorial:", error);
            });
    }, [id]);

    // Función para manejar la edición del tutorial
    const editTutorial = useCallback((e) => {
        e.preventDefault();
        TutorialDataService.update(id, tutorial)
            .then(() => {
                history.push('/tutorials'); // Redirige a la lista de tutoriales
            })
            .catch(error => {
                console.error("Error al actualizar el tutorial:", error);
            });
    }, [tutorial, id, history]);

    // Actualizar el título
    const handleTitleChange = (e) => {
        setTutorial(prevState => ({
            ...prevState,
            title: e.target.value,
        }));
    };

    // Actualizar la descripción
    const handleDescriptionChange = (e) => {
        setTutorial(prevState => ({
            ...prevState,
            description: e.target.value,
        }));
    };

    // Actualizar el estado de publicado
    const handlePublishedChange = (e) => {
        setTutorial(prevState => ({
            ...prevState,
            published: e.target.checked,
        }));
    };

    return (
        <div className="edit-tutorial-container">
            <form onSubmit={editTutorial}>
                <h1>Editar Tutorial</h1>

                <div className="form-group">
                    <label htmlFor="titulo2" className="form-label">Título</label>
                    <input
                        id="titulo2"
                        className="form-control"
                        type="text"
                        placeholder="Título"
                        value={tutorial.title}
                        onChange={handleTitleChange}
                    />
                </div>

                <div className="form-group">
                    <label htmlFor="descripcion2" className="form-label">Descripción</label>
                    <input
                        id="descripcion2"
                        className="form-control"
                        type="text"
                        placeholder="Descripción"
                        value={tutorial.description}
                        onChange={handleDescriptionChange}
                    />
                </div>

                <div className="form-group">
                    <label htmlFor="published" className="form-label">Publicado</label>
                    <input
                        type="checkbox"
                        id="published"
                        checked={tutorial.published}
                        onChange={handlePublishedChange}
                    />
                </div>

                <button className="btn btn-primary" type="submit">
                    Actualizar
                </button>
            </form>
        </div>
    );
}

export default EditTutorial;
